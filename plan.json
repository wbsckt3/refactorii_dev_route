
{
  "id": 1,
  "nombre": "Plan de Automatización de Prueba de Login",
  "testId": "TC_login_1",
  "objetivo": "Verificar que el usuario pueda iniciar sesión correctamente",
  "precondiciones": "1. El usuario debe estar registrado en el sistema.\n2. La aplicación debe estar accesible y funcionando.\n3. El ambiente de prueba debe estar configurado correctamente.",
  "pasos": "1. Abrir el navegador y navegar a la URL de login.\n2. Ingresar el email válido (alejo@gmail.com) en el campo correspondiente.\n3. Ingresar la contraseña válida (wtrrqdes) en el campo correspondiente.\n4. Hacer clic en el botón de 'Iniciar Sesión'.\n5. Verificar que el usuario es redirigido al dashboard.",
  "datosPrueba": "email: alejo@gmail.com\npassword: wtrrqdes",
  "resultadoEsperado": "El usuario es redirigido al dashboard después de iniciar sesión correctamente.",
  "criteriosAceptacion": "1. El tiempo de respuesta debe ser menor a 3 segundos.\n2. El usuario debe ser redirigido al dashboard.\n3. No deben mostrarse mensajes de error.",
  "tipoAplicacion": "opcion_app2",
  "tipoPrueba": "opcion_prueba8",
  "framework": "opcion_framework2",
  "pipeline": "opcion_pipeline1",
  "prioridad": "opcion_prioridad2",
  "fechaEjecucion": "",
  "ambiente": "opcion_ambiente1",
  "timestamp": "2023-11-02T12:00:00Z",
  "progreso": 0,
  "exercises": "```markdown\n## 1. Escenario de Prueba Estructurado (ISTQB)\n\n**Identificador y Nombre del Caso**: TC_login_1 - Prueba de Login de Usuario\n\n**Precondiciones Detalladas**:\n- Usuario registrado en el sistema con credenciales válidas.\n- La aplicación está desplegada y accesible en el ambiente de prueba.\n- El navegador está configurado correctamente.\n\n**Pasos de Ejecución**:\n1. Navegar a la página de login.\n2. Ingresar el email: alejo@gmail.com.\n3. Ingresar la contraseña: wtrrqdes.\n4. Hacer clic en el botón 'Iniciar Sesión'.\n5. Verificar la redirección al dashboard.\n\n**Datos de Prueba**:\n- Email: alejo@gmail.com\n- Contraseña: wtrrqdes\n\n**Resultado Esperado Verificable**:\n- El usuario es redirigido al dashboard.\n- El tiempo de respuesta es menor a 3 segundos.\n\n**Criterios de Aceptación Medibles**:\n- Tiempo de respuesta < 3 segundos.\n- Redirección correcta al dashboard.\n\n**Criterios de Salida**:\n- Prueba exitosa si se cumplen los criterios de aceptación.\n- Prueba fallida si no se cumplen.\n\n## 2. Estrategia de Automatización\n\n**Justificación**:\n- Alta frecuencia de ejecución (prueba de humo).\n- Criticidad alta (funcionalidad core).\n- ROI positivo por reutilización.\n\n**Nivel de Prueba**:\n- Prueba de sistema (nivel medio en pirámide).\n\n**Enfoque**:\n- Automatización GUI basada en comportamiento.\n\n**Riesgos y Mitigación**:\n- Cambios en selectores: Usar Page Object Model.\n- Tiempos de respuesta: Implementar waits inteligentes.\n\n## 3. Diseño Técnico de Automatización\n\n**Framework Justificado**:\n- Selenium WebDriver con TestNG (opcion_framework2).\n- Soporte multi-navegador y robustez.\n\n**Arquitectura del Test**:\n- Page Object Model para mantenibilidad.\n- Patrón Singleton para WebDriver.\n\n**Configuración del Ambiente**:\n- Java JDK 11.\n- Maven para gestión de dependencias.\n- Navegador Chrome versión estable.\n\n**Gestión de Datos**:\n- Datos hardcodeados para caso específico.\n- Posibilidad de extender a Data Providers.\n\n**Sincronización**:\n- Explicit waits para elementos críticos.\n- Timeout global de 10 segundos.\n\n## 4. Integración CI/CD\n\n**Pipeline Sugerido**:\n- Jenkins (opcion_pipeline1) con etapa de pruebas automatizadas.\n\n**Triggers**:\n- Con cada push a main.\n- Scheduled nightly.\n\n**Reportes**:\n- Reportes HTML de TestNG.\n- Screenshots en fallos.\n\n**Notificaciones**:\n- Email al equipo de QA en fallos.\n- Slack para notificaciones inmediatas.\n\n**Rollback**:\n- Detener despliegue si fallan pruebas críticas.\n\n## 5. Código Base de Automatización\n\n```java\nimport org.openqa.selenium.*;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.testng.Assert;\nimport org.testng.annotations.*;\n\npublic class LoginTest {\n    private WebDriver driver;\n    private String baseUrl = \"https://app-under-test.com\";\n    \n    @BeforeTest\n    public void setup() {\n        System.setProperty(\"webdriver.chrome.driver\", \"path/to/chromedriver\");\n        driver = new ChromeDriver();\n    }\n    \n    @Test\n    public void testSuccessfulLogin() {\n        long startTime = System.currentTimeMillis();\n        \n        // Paso 1: Navegar a login\n        driver.get(baseUrl + \"/login\");\n        \n        // Paso 2-4: Ingresar credenciales y hacer clic\n        driver.findElement(By.id(\"email\")).sendKeys(\"alejo@gmail.com\");\n        driver.findElement(By.id(\"password\")).sendKeys(\"wtrrqdes\");\n        driver.findElement(By.id(\"login-btn\")).click();\n        \n        // Paso 5: Verificar redirección\n        WebDriverWait wait = new WebDriverWait(driver, 10);\n        wait.until(ExpectedConditions.urlContains(\"dashboard\"));\n        \n        // Verificar tiempo de respuesta\n        long responseTime = System.currentTimeMillis() - startTime;\n        Assert.assertTrue(responseTime < 3000, \"Tiempo de respuesta excedido\");\n        \n        // Verificar URL actual\n        Assert.assertTrue(driver.getCurrentUrl().contains(\"dashboard\"));\n    }\n    \n    @AfterTest\n    public void teardown() {\n        if (driver != null) {\n            driver.quit();\n        }\n    }\n}\n```\n\n## 6. Métricas y Monitoreo\n\n**KPIs de Automatización**:\n- Tasa de éxito: 95%+\n- Tiempo de ejecución: < 5 segundos\n\n**Métricas de Calidad**:\n- Cobertura de código: 80%+\n- Complejidad ciclomática baja.\n\n**Indicadores de Estabilidad**:\n- Flaky tests: < 5%\n- Reintentos automáticos: 1\n\n**Tiempo de Ejecución Objetivo**:\n- < 5 segundos por caso.```"
}


