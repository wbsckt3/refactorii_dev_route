{
  "id": 1,
  "nombre": "Plan de Automatizaci√≥n para TC_login_2",
  "testId": "TC_login_2",
  "objetivo": "Verificar que un usuario registrado puede iniciar sesi√≥n correctamente",
  "precondiciones": "1. El usuario 'jhon@doe.com' est√° registrado en el sistema\n2. La aplicaci√≥n est√° desplegada y accesible en el ambiente especificado\n3. Las credenciales son v√°lidas y activas",
  "pasos": "1. Navegar a la URL de login\n2. Ingresar email 'jhon@doe.com' en campo correspondiente\n3. Ingresar password '5ae76sgr8t' en campo correspondiente\n4. Hacer clic en el bot√≥n 'Iniciar Sesi√≥n'",
  "datosPrueba": "email: jhon@doe.com\npassword: 5ae76sgr8t",
  "resultadoEsperado": "1. Redirecci√≥n a la p√°gina de dashboard\n2. Tiempo de respuesta menor a 3 segundos\n3. Sesi√≥n de usuario activa visible en UI",
  "criteriosAceptacion": "1. URL actual corresponde al dashboard\n2. Tiempo de respuesta < 3s (medido desde click hasta carga completa)\n3. Elemento de bienvenida visible con texto esperado",
  "tipoAplicacion": "opcion_app1",
  "tipoPrueba": "opcion_prueba4",
  "framework": "opcion_framework1",
  "pipeline": "opcion_pipeline1",
  "prioridad": "opcion_prioridad2",
  "fechaEjecucion": "",
  "ambiente": "opcion_ambiente2",
  "timestamp": "2023-11-15T12:00:00Z",
  "progreso": 0,
  "exercises": "```markdown\n## üîç 1. Escenario de Prueba Estructurado (ISTQB)\n\n**Identificador**: TC_login_2_Automated\n**Nombre**: Autenticaci√≥n de usuario v√°lido\n\n**Precondiciones detalladas**:\n- Servidor de aplicaciones en ambiente 'opcion_ambiente2' operativo\n- Base de datos con usuario de prueba pre-registrado\n- Credenciales no expiradas y con permisos adecuados\n\n**Pasos de ejecuci√≥n**:\n1. Iniciar navegador configurado seg√∫n ambiente\n2. Cargar URL base de la aplicaci√≥n (https://app.opcion_app1.com/login)\n3. Localizar campo 'Email' mediante XPath //input[@id='email']\n4. Ingresar valor 'jhon@doe.com'\n5. Localizar campo 'Password' mediante XPath //input[@id='password']\n6. Ingresar valor '5ae76sgr8t'\n7. Localizar bot√≥n 'Login' mediante XPath //button[contains(text(),'Iniciar')]\n8. Ejecutar click() sobre el elemento\n\n**Datos de prueba**:\n```json\n{\n  \"credentials\": {\n    \"valid\": {\n      \"email\": \"jhon@doe.com\",\n      \"password\": \"5ae76sgr8t\"\n    }\n  }\n}\n```\n\n**Resultado esperado verificable**:\n- HTTP Status Code 200 en respuesta de login\n- Presencia de elemento del dashboard (//div[@class='dashboard'])\n- Cookie de sesi√≥n generada\n\n**Criterios de aceptaci√≥n medibles**:\n- M√©trica: Tiempo entre paso 8 y carga completa dashboard ‚â§3000ms\n- Validaci√≥n: URL contiene '/dashboard'\n\n**Criterios de salida**:\n- Exitoso: Todas las validaciones pasan\n- Fallido: Alg√∫n criterio no se cumple o timeout > 10s\n\n## ü§ñ 2. Estrategia de Automatizaci√≥n\n\n**Justificaci√≥n**:\n- ROI: Ejecutado 15+ veces/d√≠a en regresi√≥n\n- Criticidad: Flujo core del negocio\n- Frecuencia: Alta (post-deploy, nightly builds)\n\n**Nivel de prueba**:\n- Pir√°mide: Nivel de Servicio (UI Testing)\n- Complementario: Integraci√≥n con API de auth\n\n**Enfoque**:\n- Pattern: Page Object Model + Fluent Interface\n- T√©cnica: Black-box con medici√≥n de performance\n\n**Riesgos y mitigaci√≥n**:\n1. Selectores fr√°giles ‚Üí Usar IDs oficiales + fallback a CSS\n2. Latencia de red ‚Üí Timeout configurable por ambiente\n3. Datos inconsistentes ‚Üí Reset de DB pre-ejecuci√≥n\n\n## üõ†Ô∏è 3. Dise√±o T√©cnico de Automatizaci√≥n\n\n**Framework justificado**:\n- Selenium WebDriver + TestNG\n- Motivo: Soporte multi-navegador y reporting integrado\n\n**Arquitectura del test**:\n```\nproject/\n‚îú‚îÄ‚îÄ pages/\n‚îÇ   ‚îú‚îÄ‚îÄ LoginPage.java\n‚îÇ   ‚îî‚îÄ‚îÄ DashboardPage.java\n‚îú‚îÄ‚îÄ tests/\n‚îÇ   ‚îî‚îÄ‚îÄ LoginTest.java\n‚îú‚îÄ‚îÄ utils/\n‚îÇ   ‚îú‚îÄ‚îÄ WebDriverFactory.java\n‚îÇ   ‚îî‚îÄ‚îÄ Reporter.java\n‚îî‚îÄ‚îÄ config.properties\n```\n\n**Configuraci√≥n del ambiente**:\n- Variables requeridas:\n  - BASE_URL\n  - IMPLICIT_WAIT\n  - HEADLESS_MODE\n\n**Gesti√≥n de datos**:\n- Strategy: Externalizaci√≥n en JSON\n- Seguridad: Credenciales en vault para CI\n\n**Sincronizaci√≥n**:\n- Explicit Waits para elementos cr√≠ticos\n- Polling cada 500ms con timeout de 10s\n\n## üîÑ 4. Integraci√≥n CI/CD\n\n**Pipeline sugerido**:\n```yaml\nstages:\n  - test\n  - report\n\njobs:\n  login-test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up JDK 11\n        uses: actions/setup-java@v2\n      - run: mvn test -Dtest=LoginTest\n      - uses: actions/upload-artifact@v2\n        with:\n          name: test-reports\n          path: target/surefire-reports/\n```\n\n**Triggers**:\n- Push a main/master\n- Schedule: Diario 2AM UTC\n\n**Reportes**:\n- Formato: Surefire + Allure\n- Artefactos:\n  - Screenshot en fallos\n  - HAR file para an√°lisis\n\n**Notificaciones**:\n- Slack: Canal #qa-alerts\n- Email: equipo-qa@company.com\n\n**Rollback**:\n- Auto-revert si >50% de pruebas cr√≠ticas fallan\n\n## üíª 5. C√≥digo Base de Automatizaci√≥n\n\n```java\n// LoginTest.java\npublic class LoginTest extends BaseTest {\n  @Test\n  public void successfulLogin() {\n    LoginPage loginPage = new LoginPage(driver);\n    DashboardPage dashboard = loginPage\n      .navigateTo()\n      .enterEmail(\"jhon@doe.com\")\n      .enterPassword(\"5ae76sgr8t\")\n      .submit();\n\n    long startTime = System.currentTimeMillis();\n    assertTrue(dashboard.isLoaded());\n    long responseTime = System.currentTimeMillis() - startTime;\n    \n    assertTrue(responseTime < 3000, \"Tiempo de respuesta excedido\");\n    Reporter.log(\"Tiempo de login: \" + responseTime + \"ms\");\n  }\n}\n```\n\n## üìä 6. M√©tricas y Monitoreo\n\n**KPIs**:\n- Tasa de √©xito: ‚â•98%\n- False positives: <2%\n\n**M√©tricas de calidad**:\n- Complejidad ciclom√°tica: ‚â§5\n- Cobertura de asserts: 100%\n\n**Indicadores de estabilidad**:\n- Flakiness score: <0.5\n\n**Tiempo de ejecuci√≥n objetivo**:\n- Objetivo: ‚â§30s por ejecuci√≥n\n```"
}
